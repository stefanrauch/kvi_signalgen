---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for External Flash Update
---------------------------------------------------------------------------------------
-- File           : wb_FlashUpdate.vhd
-- Author         : auto-generated by wbgen2 from gen_FlashUpdate.wb
-- Created        : 12/05/12 09:48:26
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE gen_FlashUpdate.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity wb_FlashUpdate is
  port (
-- 
    rst_n_i                                  : in     std_logic;
-- 
    wb_clk_i                                 : in     std_logic;
-- 
    wb_addr_i                                : in     std_logic_vector(2 downto 0);
-- 
    wb_data_i                                : in     std_logic_vector(31 downto 0);
-- 
    wb_data_o                                : out    std_logic_vector(31 downto 0);
-- 
    wb_cyc_i                                 : in     std_logic;
-- 
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
-- 
    wb_stb_i                                 : in     std_logic;
-- 
    wb_we_i                                  : in     std_logic;
-- 
    wb_ack_o                                 : out    std_logic;
-- Port for std_logic_vector field: 'parameter data' in reg: 'Flash parameters'
    wbflash_params_data_o                    : out    std_logic_vector(23 downto 0);
-- Port for std_logic_vector field: 'parameter address' in reg: 'Flash parameters'
    wbflash_params_address_o                 : out    std_logic_vector(2 downto 0);
-- Ports for PASS_THROUGH field: 'parameter write' in reg: 'Flash parameters'
    wbflash_params_write_o                   : out    std_logic_vector(0 downto 0);
    wbflash_params_write_wr_o                : out    std_logic;
-- Ports for PASS_THROUGH field: 'parameter read request' in reg: 'Flash parameters'
    wbflash_params_request_o                 : out    std_logic_vector(0 downto 0);
    wbflash_params_request_wr_o              : out    std_logic;
-- Ports for PASS_THROUGH field: 'start reconfiguration' in reg: 'Flash parameters'
    wbflash_params_reconf_o                  : out    std_logic_vector(2 downto 0);
    wbflash_params_reconf_wr_o               : out    std_logic;
-- Port for std_logic_vector field: 'data read' in reg: 'Flash parameters read'
    wbflash_params_read_data_i               : in     std_logic_vector(23 downto 0);
-- Port for std_logic_vector field: 'addres read' in reg: 'Flash parameters read'
    wbflash_params_read_address_i            : in     std_logic_vector(2 downto 0);
-- Port for std_logic_vector field: 'configuration busy' in reg: 'Flash parameters read'
    wbflash_params_read_busy_i               : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'configuration data error' in reg: 'Flash parameters read'
    wbflash_params_read_error_i              : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'configuration write error' in reg: 'Flash parameters read'
    wbflash_params_read_illegal_i            : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'illegal flash erase' in reg: 'Flash parameters read'
    wbflash_params_read_erase_error_i        : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'flash data' in reg: 'Flash data'
    wbflash_flash_data_data_o                : out    std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'flash address' in reg: 'Flash data'
    wbflash_flash_data_address_o             : out    std_logic_vector(23 downto 0);
-- Ports for PASS_THROUGH field: 'Access to flash, disable in wb_FlashUpdate.vhd' in reg: 'Flash data'
--//    wbflash_flash_data_access_o              : out    std_logic_vector;
    wbflash_flash_data_access_wr_o           : out    std_logic;
-- Port for std_logic_vector field: 'data from flash' in reg: 'Flash read'
    wbflash_flash_read_data_i                : in     std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'data from flash is valid' in reg: 'Flash read'
    wbflash_flash_read_valid_i               : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'accessing flash is busy' in reg: 'Flash read'
    wbflash_flash_read_busy_i                : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'error accessing flash' in reg: 'Flash read'
    wbflash_flash_read_error_i               : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'Enable data access' in reg: 'Flash access'
    wbflash_flash_access_enable_o            : out    std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'Enable reading from flash' in reg: 'Flash access'
    wbflash_flash_access_read_enable_o       : out    std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'Enable writing to flash' in reg: 'Flash access'
    wbflash_flash_access_write_enable_o      : out    std_logic_vector(2 downto 0);
-- Port for std_logic_vector field: 'Enable erasing sector' in reg: 'Flash access'
    wbflash_flash_access_erase_enable_o      : out    std_logic_vector(2 downto 0);
-- Ports for PASS_THROUGH field: 'Read ID from flash' in reg: 'Flash access'
    wbflash_flash_access_id_o                : out    std_logic_vector(0 downto 0);
    wbflash_flash_access_id_wr_o             : out    std_logic;
-- Ports for PASS_THROUGH field: 'Read status form flash' in reg: 'Flash access'
    wbflash_flash_access_status_o            : out    std_logic_vector(0 downto 0);
    wbflash_flash_access_status_wr_o         : out    std_logic
  );
end wb_FlashUpdate;

architecture syn of wb_FlashUpdate is

signal wbflash_params_data_int                  : std_logic_vector(23 downto 0);
signal wbflash_params_address_int               : std_logic_vector(2 downto 0);
signal wbflash_flash_data_data_int              : std_logic_vector(7 downto 0);
signal wbflash_flash_data_address_int           : std_logic_vector(23 downto 0);
signal wbflash_flash_access_enable_int          : std_logic_vector(0 downto 0);
signal wbflash_flash_access_read_enable_int     : std_logic_vector(0 downto 0);
signal wbflash_flash_access_write_enable_int    : std_logic_vector(2 downto 0);
signal wbflash_flash_access_erase_enable_int    : std_logic_vector(2 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(2 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= std_logic_vector(to_unsigned(0, 10));
      ack_in_progress <= '0';
      rddata_reg <= std_logic_vector(to_unsigned(0, 32));
      wbflash_params_data_int <= std_logic_vector(to_unsigned(0, 24));
      wbflash_params_address_int <= std_logic_vector(to_unsigned(0, 3));
      wbflash_params_write_wr_o <= '0';
      wbflash_params_request_wr_o <= '0';
      wbflash_params_reconf_wr_o <= '0';
      wbflash_flash_data_data_int <= std_logic_vector(to_unsigned(0, 8));
      wbflash_flash_data_address_int <= std_logic_vector(to_unsigned(0, 24));
      wbflash_flash_data_access_wr_o <= '0';
      wbflash_flash_access_enable_int <= std_logic_vector(to_unsigned(0, 1));
      wbflash_flash_access_read_enable_int <= std_logic_vector(to_unsigned(0, 1));
      wbflash_flash_access_write_enable_int <= std_logic_vector(to_unsigned(0, 3));
      wbflash_flash_access_erase_enable_int <= std_logic_vector(to_unsigned(0, 3));
      wbflash_flash_access_id_wr_o <= '0';
      wbflash_flash_access_status_wr_o <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          wbflash_params_write_wr_o <= '0';
          wbflash_params_request_wr_o <= '0';
          wbflash_params_reconf_wr_o <= '0';
          wbflash_flash_data_access_wr_o <= '0';
          wbflash_flash_access_id_wr_o <= '0';
          wbflash_flash_access_status_wr_o <= '0';
          ack_in_progress <= '0';
        else
          wbflash_params_write_wr_o <= '0';
          wbflash_params_request_wr_o <= '0';
          wbflash_params_reconf_wr_o <= '0';
          wbflash_flash_data_access_wr_o <= '0';
          wbflash_flash_access_id_wr_o <= '0';
          wbflash_flash_access_status_wr_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
              wbflash_params_data_int <= wrdata_reg(23 downto 0);
              wbflash_params_address_int <= wrdata_reg(26 downto 24);
              wbflash_params_write_wr_o <= '1';
              wbflash_params_request_wr_o <= '1';
              wbflash_params_reconf_wr_o <= '1';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            else
              rddata_reg(23 downto 0) <= wbflash_params_data_int;
              rddata_reg(26 downto 24) <= wbflash_params_address_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "001" => 
            if (wb_we_i = '1') then
              rddata_reg(31) <= 'X';
            else
              rddata_reg(23 downto 0) <= wbflash_params_read_data_i;
              rddata_reg(26 downto 24) <= wbflash_params_read_address_i;
              rddata_reg(27 downto 27) <= wbflash_params_read_busy_i;
              rddata_reg(28 downto 28) <= wbflash_params_read_error_i;
              rddata_reg(29 downto 29) <= wbflash_params_read_illegal_i;
              rddata_reg(30 downto 30) <= wbflash_params_read_erase_error_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
              wbflash_flash_data_data_int <= wrdata_reg(7 downto 0);
              wbflash_flash_data_address_int <= wrdata_reg(31 downto 8);
              wbflash_flash_data_access_wr_o <= '1';
            else
              rddata_reg(7 downto 0) <= wbflash_flash_data_data_int;
              rddata_reg(31 downto 8) <= wbflash_flash_data_address_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            else
              rddata_reg(7 downto 0) <= wbflash_flash_read_data_i;
              rddata_reg(8 downto 8) <= wbflash_flash_read_valid_i;
              rddata_reg(9 downto 9) <= wbflash_flash_read_busy_i;
              rddata_reg(10 downto 10) <= wbflash_flash_read_error_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
              wbflash_flash_access_enable_int <= wrdata_reg(0 downto 0);
              wbflash_flash_access_read_enable_int <= wrdata_reg(1 downto 1);
              wbflash_flash_access_write_enable_int <= wrdata_reg(4 downto 2);
              wbflash_flash_access_erase_enable_int <= wrdata_reg(7 downto 5);
              wbflash_flash_access_id_wr_o <= '1';
              wbflash_flash_access_status_wr_o <= '1';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            else
              rddata_reg(0 downto 0) <= wbflash_flash_access_enable_int;
              rddata_reg(1 downto 1) <= wbflash_flash_access_read_enable_int;
              rddata_reg(4 downto 2) <= wbflash_flash_access_write_enable_int;
              rddata_reg(7 downto 5) <= wbflash_flash_access_erase_enable_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- parameter data
  wbflash_params_data_o <= wbflash_params_data_int;
-- parameter address
  wbflash_params_address_o <= wbflash_params_address_int;
-- parameter write
-- pass-through field: parameter write in register: Flash parameters
  wbflash_params_write_o <= wrdata_reg(27 downto 27);
-- parameter read request
-- pass-through field: parameter read request in register: Flash parameters
  wbflash_params_request_o <= wrdata_reg(28 downto 28);
-- start reconfiguration
-- pass-through field: start reconfiguration in register: Flash parameters
  wbflash_params_reconf_o <= wrdata_reg(31 downto 29);
-- data read
-- addres read
-- configuration busy
-- configuration data error
-- configuration write error
-- illegal flash erase
-- flash data
  wbflash_flash_data_data_o <= wbflash_flash_data_data_int;
-- flash address
  wbflash_flash_data_address_o <= wbflash_flash_data_address_int;
-- Access to flash, disable in wb_FlashUpdate.vhd
-- pass-through field: Access to flash, disable in wb_FlashUpdate.vhd in register: Flash data
--//  wbflash_flash_data_access_o <= wrdata_reg(31 downto 32);
-- data from flash
-- data from flash is valid
-- accessing flash is busy
-- error accessing flash
-- Enable data access
  wbflash_flash_access_enable_o <= wbflash_flash_access_enable_int;
-- Enable reading from flash
  wbflash_flash_access_read_enable_o <= wbflash_flash_access_read_enable_int;
-- Enable writing to flash
  wbflash_flash_access_write_enable_o <= wbflash_flash_access_write_enable_int;
-- Enable erasing sector
  wbflash_flash_access_erase_enable_o <= wbflash_flash_access_erase_enable_int;
-- Read ID from flash
-- pass-through field: Read ID from flash in register: Flash access
  wbflash_flash_access_id_o <= wrdata_reg(8 downto 8);
-- Read status form flash
-- pass-through field: Read status form flash in register: Flash access
  wbflash_flash_access_status_o <= wrdata_reg(9 downto 9);
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;

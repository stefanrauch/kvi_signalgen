---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for BuTis clock generator
---------------------------------------------------------------------------------------
-- File           : wb_BuTiSclock.vhd
-- Author         : auto-generated by wbgen2 from gen_BuTiSclock.wb
-- Created        : 09/20/12 15:35:38
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE gen_BuTiSclock.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity wb_BuTiSclock is
  port (
-- 
    rst_n_i                                  : in     std_logic;
-- 
    wb_clk_i                                 : in     std_logic;
-- 
    wb_addr_i                                : in     std_logic_vector(1 downto 0);
-- 
    wb_data_i                                : in     std_logic_vector(31 downto 0);
-- 
    wb_data_o                                : out    std_logic_vector(31 downto 0);
-- 
    wb_cyc_i                                 : in     std_logic;
-- 
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
-- 
    wb_stb_i                                 : in     std_logic;
-- 
    wb_we_i                                  : in     std_logic;
-- 
    wb_ack_o                                 : out    std_logic;
-- Port for std_logic_vector field: 'Low Word' in reg: 'TimeStamp data Low word'
    wbbutis_timestamp_lw_o                   : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High Word' in reg: 'TimeStamp data High word'
    wbbutis_timestamp_hw_o                   : out    std_logic_vector(31 downto 0);
-- Ports for PASS_THROUGH field: 'Set on next PPS' in reg: 'BuTis clock generator control'
    wbbutis_control_set_o                    : out    std_logic_vector(0 downto 0);
    wbbutis_control_set_wr_o                 : out    std_logic;
-- Ports for PASS_THROUGH field: 'Re-synchronize' in reg: 'BuTis clock generator control'
    wbbutis_control_sync_o                   : out    std_logic_vector(0 downto 0);
    wbbutis_control_sync_wr_o                : out    std_logic;
-- Ports for PASS_THROUGH field: 'reset phase-PLL' in reg: 'BuTis clock generator control'
    wbbutis_control_reset_o                  : out    std_logic_vector(0 downto 0);
    wbbutis_control_reset_wr_o               : out    std_logic;
-- Port for std_logic_vector field: 'unused' in reg: 'BuTis clock generator control'
    wbbutis_control_unused_o                 : out    std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'PLLphase' in reg: 'BuTis clock generator control'
    wbbutis_control_phase_o                  : out    std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'timestamp set busy' in reg: 'BuTis clock generator Status'
    wbbutis_status_set_i                     : in     std_logic_vector(0 downto 0);
-- Port for std_logic_vector field: 'Phase of the PPS' in reg: 'BuTis clock generator Status'
    wbbutis_status_ppsphase_i                : in     std_logic_vector(0 downto 0)
  );
end wb_BuTiSclock;

architecture syn of wb_BuTiSclock is

signal wbbutis_timestamp_lw_int                 : std_logic_vector(31 downto 0);
signal wbbutis_timestamp_hw_int                 : std_logic_vector(31 downto 0);
signal wbbutis_control_unused_int               : std_logic_vector(4 downto 0);
signal wbbutis_control_phase_int                : std_logic_vector(7 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(1 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= std_logic_vector(to_unsigned(0, 10));
      ack_in_progress <= '0';
      rddata_reg <= std_logic_vector(to_unsigned(0, 32));
      wbbutis_timestamp_lw_int <= std_logic_vector(to_unsigned(0, 32));
      wbbutis_timestamp_hw_int <= std_logic_vector(to_unsigned(0, 32));
      wbbutis_control_set_wr_o <= '0';
      wbbutis_control_sync_wr_o <= '0';
      wbbutis_control_reset_wr_o <= '0';
      wbbutis_control_unused_int <= std_logic_vector(to_unsigned(0, 5));
      wbbutis_control_phase_int <= std_logic_vector(to_unsigned(0, 8));
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          wbbutis_control_set_wr_o <= '0';
          wbbutis_control_sync_wr_o <= '0';
          wbbutis_control_reset_wr_o <= '0';
          ack_in_progress <= '0';
        else
          wbbutis_control_set_wr_o <= '0';
          wbbutis_control_sync_wr_o <= '0';
          wbbutis_control_reset_wr_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(1 downto 0) is
          when "00" => 
            if (wb_we_i = '1') then
              wbbutis_timestamp_lw_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= wbbutis_timestamp_lw_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01" => 
            if (wb_we_i = '1') then
              wbbutis_timestamp_hw_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= wbbutis_timestamp_hw_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10" => 
            if (wb_we_i = '1') then
              wbbutis_control_set_wr_o <= '1';
              wbbutis_control_sync_wr_o <= '1';
              wbbutis_control_reset_wr_o <= '1';
              wbbutis_control_unused_int <= wrdata_reg(7 downto 3);
              wbbutis_control_phase_int <= wrdata_reg(15 downto 8);
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            else
              rddata_reg(7 downto 3) <= wbbutis_control_unused_int;
              rddata_reg(15 downto 8) <= wbbutis_control_phase_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "11" => 
            if (wb_we_i = '1') then
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            else
              rddata_reg(0 downto 0) <= wbbutis_status_set_i;
              rddata_reg(1 downto 1) <= wbbutis_status_ppsphase_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- Low Word
  wbbutis_timestamp_lw_o <= wbbutis_timestamp_lw_int;
-- High Word
  wbbutis_timestamp_hw_o <= wbbutis_timestamp_hw_int;
-- Set on next PPS
-- pass-through field: Set on next PPS in register: BuTis clock generator control
  wbbutis_control_set_o <= wrdata_reg(0 downto 0);
-- Re-synchronize
-- pass-through field: Re-synchronize in register: BuTis clock generator control
  wbbutis_control_sync_o <= wrdata_reg(1 downto 1);
-- reset phase-PLL
-- pass-through field: reset phase-PLL in register: BuTis clock generator control
  wbbutis_control_reset_o <= wrdata_reg(2 downto 2);
-- unused
  wbbutis_control_unused_o <= wbbutis_control_unused_int;
-- PLLphase
  wbbutis_control_phase_o <= wbbutis_control_phase_int;
-- timestamp set busy
-- Phase of the PPS
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
